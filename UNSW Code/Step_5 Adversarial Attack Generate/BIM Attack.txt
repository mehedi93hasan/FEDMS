import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.utils import to_categorical
import os
import warnings
warnings.filterwarnings('ignore')

class BIMAttacker:
    def __init__(self, model):
        self.model = model

    def generate_bim_attack(self, x_samples, y_true, epsilon, num_iterations=10):
        """Generate BIM adversarial examples"""
        alpha = epsilon / num_iterations
        x_original = tf.Variable(x_samples.astype(np.float32))
        x_adversarial = tf.Variable(x_samples.astype(np.float32))

        for _ in range(num_iterations):
            with tf.GradientTape() as tape:
                tape.watch(x_adversarial)
                predictions = self.model(x_adversarial)
                loss = tf.keras.losses.categorical_crossentropy(y_true, predictions)

            gradients = tape.gradient(loss, x_adversarial)
            signed_gradients = tf.sign(gradients)

            # Apply iterative step
            x_adversarial.assign(x_adversarial + alpha * signed_gradients)

            # Project back to epsilon ball
            perturbation = tf.clip_by_value(x_adversarial - x_original, -epsilon, epsilon)
            x_adversarial.assign(x_original + perturbation)

        return x_adversarial.numpy(), (x_adversarial - x_original).numpy()

def create_and_train_model(X_train, y_train, X_test, y_test):
    """Create and train a simple neural network"""
    model = Sequential([
        Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
        Dropout(0.3),
        Dense(32, activation='relu'),
        Dropout(0.3),
        Dense(y_train.shape[1], activation='softmax')
    ])

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(X_train, y_train, epochs=30, batch_size=32, validation_split=0.2, verbose=0)

    _, accuracy = model.evaluate(X_test, y_test, verbose=0)
    print(f"‚úì Model trained with accuracy: {accuracy:.4f}")

    return model

def generate_bim_attacks_and_csv(csv_path, epsilon_percentages=[2, 5, 10, 20], sample_size=500000):
    """Complete BIM attack pipeline"""
    print("üéØ Starting BIM Attack Generation")

    # Load and prepare data
    data = pd.read_csv(csv_path)
    print(f"‚úì Loaded dataset: {data.shape}")

    # Separate features and labels
    if 'label' in data.columns:
        X = data.drop('label', axis=1).values
        y = data['label'].values
        feature_names = list(data.columns[:-1])
    else:
        X = data.iloc[:, :-1].values
        y = data.iloc[:, -1].values
        feature_names = [f'feature_{i}' for i in range(X.shape[1])]

    # Encode labels
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(y)
    y_categorical = to_categorical(y_encoded)

    # Split and scale data
    X_train, X_test, y_train, y_test = train_test_split(X, y_categorical, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Train model
    model = create_and_train_model(X_train_scaled, y_train, X_test_scaled, y_test)

    # Initialize BIM attacker
    attacker = BIMAttacker(model)

    # Select samples for attack
    if sample_size > len(X_test_scaled):
        sample_size = len(X_test_scaled)

    indices = np.random.choice(len(X_test_scaled), sample_size, replace=False)
    X_attack = X_test_scaled[indices]
    y_attack = y_test[indices]
    y_labels = label_encoder.inverse_transform(np.argmax(y_attack, axis=1))

    # Calculate data range
    data_range = np.max(X_attack) - np.min(X_attack)

    # Create output directory
    output_dir = 'adversarial_csv_bim'
    os.makedirs(output_dir, exist_ok=True)

    print(f"‚úì Generating BIM attacks for {len(epsilon_percentages)} perturbation levels...")

    summary_data = []

    # Generate attacks for each epsilon
    for eps_percent in epsilon_percentages:
        epsilon = (eps_percent / 100.0) * data_range
        print(f"\nüî∏ {eps_percent}% perturbation (Œµ={epsilon:.6f})")

        # Generate BIM adversarial examples
        x_adv, perturbations = attacker.generate_bim_attack(X_attack, y_attack, epsilon)

        # Calculate statistics
        predictions_clean = model.predict(X_attack, verbose=0)
        predictions_adv = model.predict(x_adv, verbose=0)

        accuracy_clean = accuracy_score(np.argmax(y_attack, axis=1), np.argmax(predictions_clean, axis=1))
        accuracy_adv = accuracy_score(np.argmax(y_attack, axis=1), np.argmax(predictions_adv, axis=1))
        attack_success_rate = 1 - accuracy_adv

        print(f"   ‚úì Attack success rate: {attack_success_rate:.4f}")

        # Create CSV
        df_adversarial = pd.DataFrame(x_adv, columns=feature_names)
        df_adversarial['label'] = y_labels
        df_adversarial['perturbation_level'] = f'{eps_percent}%'
        df_adversarial['epsilon_value'] = epsilon
        df_adversarial['num_iterations'] = 10
        df_adversarial['attack_method'] = 'BIM'
        df_adversarial['perturbation_norm'] = np.linalg.norm(perturbations, axis=1)

        # Add predictions
        predicted_classes = np.argmax(predictions_adv, axis=1)
        predicted_labels = label_encoder.inverse_transform(predicted_classes)
        df_adversarial['predicted_label'] = predicted_labels
        df_adversarial['prediction_confidence'] = np.max(predictions_adv, axis=1)
        df_adversarial['attack_successful'] = (y_labels != predicted_labels)

        # Save CSV
        csv_filename = f"{output_dir}/bim_adversarial_examples_{eps_percent}percent.csv"
        df_adversarial.to_csv(csv_filename, index=False)
        print(f"   ‚úì Saved: {csv_filename}")

        # Store summary
        summary_data.append({
            'perturbation_level': f'{eps_percent}%',
            'epsilon_value': epsilon,
            'num_iterations': 10,
            'samples_count': len(x_adv),
            'attack_success_rate': attack_success_rate,
            'avg_perturbation_norm': np.mean(np.linalg.norm(perturbations, axis=1)),
            'attack_method': 'BIM'
        })

    # Save summary
    summary_df = pd.DataFrame(summary_data)
    summary_path = f"{output_dir}/bim_attack_summary.csv"
    summary_df.to_csv(summary_path, index=False)

    print(f"\n‚úÖ BIM Attack Generation Completed!")
    print(f"üìÑ Files created:")
    for eps in epsilon_percentages:
        print(f"   ‚Ä¢ {output_dir}/bim_adversarial_examples_{eps}percent.csv")
    print(f"   ‚Ä¢ {output_dir}/bim_attack_summary.csv")

    print(f"\nüìä Summary:")
    print(summary_df.to_string(index=False))

    return summary_df

# Example usage
if __name__ == "__main__":
    # üîπ UPDATE THIS PATH
    CSV_PATH = "/content/[Final Data]filtered_dataset_kddcup.csv"

    print("‚öîÔ∏è  BIM ATTACK IMPLEMENTATION")
    print("=" * 50)

    try:
        # Generate BIM attacks and CSV files
        summary = generate_bim_attacks_and_csv(CSV_PATH)

        print(f"\nüéØ Ready for defense testing!")
        print(f"Load adversarial examples:")
        print(f"   df = pd.read_csv('adversarial_csv_bim/bim_adversarial_examples_10percent.csv')")
        print(f"   X_adv = df[feature_columns].values")
        print(f"   y_true = df['label'].values")

    except FileNotFoundError:
        print(f"‚ùå Dataset not found at: {CSV_PATH}")
        print(f"Please update CSV_PATH with your actual file location")
    except Exception as e:
        print(f"‚ùå Error: {e}")