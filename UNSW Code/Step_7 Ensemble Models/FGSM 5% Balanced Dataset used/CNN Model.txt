import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv1D, MaxPooling1D, Flatten, Dropout
from tensorflow.keras.utils import to_categorical

# Load and prepare data
df = pd.read_csv('FGSM_5percent_kddcup99_minmax.csv')
X = df.drop('label', axis=1).values  # Replace 'target_column' with your target
y = df['label'].values

# Encode labels if categorical
le = LabelEncoder()
y_encoded = le.fit_transform(y)
y_categorical = to_categorical(y_encoded)

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Reshape for CNN (samples, timesteps, features)
X_reshaped = X_scaled.reshape(X_scaled.shape[0], X_scaled.shape[1], 1)

# Split data
X_train, X_test, y_train, y_test = train_test_split(
    X_reshaped, y_categorical, test_size=0.2, random_state=42
)

# Build CNN model
model = Sequential([
    Conv1D(32, 3, activation='relu', input_shape=(X_reshaped.shape[1], 1)),
    MaxPooling1D(2),
    Conv1D(64, 3, activation='relu'),
    Dropout(0.3),
    Flatten(),
    Dense(50, activation='relu'),
    Dense(y_categorical.shape[1], activation='softmax')
])

# Compile and train
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2, verbose=1)

# Save model and preprocessing objects
model_data = {
    'model': model,
    'scaler': scaler,
    'label_encoder': le
}

with open('FGSM_5percent_cnn_model_kddcup.pkl', 'wb') as f:
    pickle.dump(model_data, f)

print("Model saved as FGSM_5percent_cnn_model_kddcup.pkl")